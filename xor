#!/usr/bin/python
# xor 6161 20 202020 -p
# xor aa ' ' '  b' -b -p
from optparse import OptionParser
import struct


# helper functions, xor two strings of different lengths
def xor_strings(xs, ys):
    return "".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))


def xor_hex_strings(xs, ys):
    return "".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs.decode("hex"), ys.decode("hex"))).encode("hex")


# parse options
usage = "usage: %prog [-b -p] string_a string_b\nNOTE: by default this program processes hexadecimal strings"
parser = OptionParser(usage=usage)

parser.add_option("-b", "--binary", action="store_true", dest="binary", help="process binary strings instead of hexadecimal strings")

parser.add_option("-p", "--pad", action="store_true", dest="pad", help="pad strings with trailing zeros to so that all input strings have the same length")

(options, args) = parser.parse_args()

if len(args) < 2:
    parser.error("at least two strings must be passed to this program")

# pad strings if necessary
if options.pad:
    maxlen = 0

    for arg in args:
        l = len(arg)

        if not options.binary:
            if l % 2 != 0:
                parser.error("the strings passed were not valid hexadecimal strings")
        if l > maxlen:
            maxlen = l

    for i in range(len(args)):
        if options.binary:
            if maxlen != len(args[i]):
                args[i] = args[i] + struct.pack(str(maxlen - len(args[i])) + 's', '')
        else:
            if maxlen != len(args[i]):
                args[i] = args[i] + ''.zfill(maxlen - len(args[i]))

# read strings from args and xor them
if options.binary:
    first = args[0]
    for i in range(1, len(args)):
        first = xor_strings(first, args[i])
    print(first)
else:
    try:
        first = args[0]
        for i in range(1, len(args)):
            first = xor_hex_strings(first, args[i])
        print(first)
    except:
        parser.error("the strings passed were not valid hexadecimal strings")
